#!/bin/bash

set -e

# SafeClaude - Secure Claude Code sandbox with GitHub-enforced branch protection
# Version 2.0.0

SCRIPT_VERSION="2.0.0"
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Source library files
if [ -f "$SCRIPT_DIR/lib/registry.sh" ]; then
    source "$SCRIPT_DIR/lib/registry.sh"
fi
if [ -f "$SCRIPT_DIR/lib/keys.sh" ]; then
    source "$SCRIPT_DIR/lib/keys.sh"
fi
if [ -f "$SCRIPT_DIR/lib/docker.sh" ]; then
    source "$SCRIPT_DIR/lib/docker.sh"
fi
if [ -f "$SCRIPT_DIR/lib/container.sh" ]; then
    source "$SCRIPT_DIR/lib/container.sh"
fi

# Print usage
usage() {
    cat <<EOF
${GREEN}SafeClaude${NC} v${SCRIPT_VERSION} - Secure Claude Code sandbox

${BLUE}SETUP COMMANDS${NC}
  setup <name> <repo-url>       Set up a new project
  list                          List all configured projects
  remove <name>                 Remove a project

${BLUE}RUN COMMANDS${NC}
  run <name> [OPTIONS]          Run Claude Code for a project

  Options for 'run':
    --network                       Enable network access
    --persist                       Persist Claude config between sessions
    --use-host-prompt=true/false    Copy CLAUDE.md (default: true)
    --use-host-agents=true/false    Copy agents/ (default: true)
    --use-host-commands=true/false  Copy commands/ (default: true)

${BLUE}BACKGROUND COMMANDS${NC}
  start <name> <agent-name>     Start Claude in background
  attach <agent-name>           Attach to a running agent
  logs <agent-name> [-f]        View agent logs (-f to follow)
  ps                            List all running containers
  stop <agent-name>             Stop and remove an agent

${BLUE}CONFIGURATION COMMANDS${NC}
  config set <key> <value>      Set a config value
  config get [key]              Get config value(s)
  config list                   List all config
  config set-api-key <key>      Store Anthropic API key (optional)
  config get-api-key            Show stored API key (masked)
  config remove-api-key         Remove API key from config

${BLUE}UTILITY COMMANDS${NC}
  --help, help                  Show this help message
  --version                     Show version information

${BLUE}EXAMPLES${NC}
  # Setup a new project
  safeclaude setup myrepo git@github.com:user/myrepo.git

  # Run the project
  safeclaude run myrepo

  # Run with network and persistence
  safeclaude run myrepo --network --persist

  # Disable copying slash commands (e.g., if they depend on MCP tools)
  safeclaude run myrepo --use-host-commands=false

  # Or set it as a default in config
  safeclaude config set use_host_commands false

  # Run without copying host config
  safeclaude run myrepo --no-host-config

  # Start in background
  safeclaude start myrepo agent-1

  # Attach to it
  safeclaude attach agent-1

${BLUE}SECURITY${NC}
  - Per-project deploy keys (isolated credentials)
  - GitHub branch protection enforcement (server-side)
  - Container isolation (ephemeral workspaces)
  - Network isolation by default (--network to enable)

EOF
    exit 0
}

# Check if Docker is installed
check_docker() {
    if ! command -v docker &> /dev/null; then
        echo -e "${RED}Error: Docker is not installed${NC}"
        echo "Please install Docker: https://docs.docker.com/get-docker/"
        exit 1
    fi
}

# Check if Docker image exists
check_image() {
    if ! docker image inspect "$IMAGE_NAME" &> /dev/null; then
        echo -e "${RED}Error: SafeClaude image '$IMAGE_NAME' not found${NC}"
        echo "Please run ./install.sh first to build the image"
        exit 1
    fi
}

# Check if jq is installed
check_jq() {
    if ! command -v jq &> /dev/null; then
        echo -e "${RED}Error: jq is not installed${NC}"
        echo ""
        echo "Install it with:"
        echo "  macOS:   brew install jq"
        echo "  Linux:   apt-get install jq / yum install jq"
        exit 1
    fi
}

# Setup a new project
cmd_setup() {
    local name="$1"
    local repo_url="$2"

    if [ -z "$name" ] || [ -z "$repo_url" ]; then
        echo -e "${RED}Error: Both project name and repository URL are required${NC}"
        echo "Usage: safeclaude setup <name> <repo-url>"
        exit 1
    fi

    # Validate project name (alphanumeric, hyphens, underscores only)
    if [[ ! "$name" =~ ^[a-zA-Z0-9_-]+$ ]]; then
        echo -e "${RED}Error: Project name must contain only letters, numbers, hyphens, and underscores${NC}"
        echo "Invalid name: $name"
        exit 1
    fi

    # Validate project name length
    if [ ${#name} -gt 64 ]; then
        echo -e "${RED}Error: Project name too long (max 64 characters)${NC}"
        exit 1
    fi

    echo -e "${GREEN}SafeClaude Project Setup${NC}"
    echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
    echo ""

    # Check if gh CLI is installed
    if ! command -v gh &> /dev/null; then
        echo -e "${RED}Error: GitHub CLI (gh) is not installed${NC}"
        echo ""
        echo "Install it with:"
        echo "  macOS:   brew install gh"
        echo "  Linux:   See https://github.com/cli/cli#installation"
        echo ""
        echo "Then authenticate: gh auth login"
        exit 1
    fi

    # Check if authenticated
    if ! gh auth status &> /dev/null; then
        echo -e "${RED}Error: Not authenticated with GitHub CLI${NC}"
        echo ""
        echo "Please run: gh auth login"
        exit 1
    fi

    # Extract owner/repo from URL
    local owner_repo
    if [[ "$repo_url" =~ github.com[:/]([^/]+/[^/]+)(\.git)?$ ]]; then
        owner_repo="${BASH_REMATCH[1]}"
        owner_repo="${owner_repo%.git}"

        # Validate owner/repo format (alphanumeric, hyphens, underscores, dots for repo)
        if [[ ! "$owner_repo" =~ ^[a-zA-Z0-9_-]+/[a-zA-Z0-9._-]+$ ]]; then
            echo -e "${RED}Error: Invalid repository format in URL${NC}"
            echo "Repository format should be: owner/repo"
            echo "Got: $owner_repo"
            exit 1
        fi
    else
        echo -e "${RED}Error: Invalid GitHub repository URL${NC}"
        echo "Expected format: git@github.com:owner/repo.git or https://github.com/owner/repo.git"
        exit 1
    fi

    echo "Project:    $name"
    echo "Repository: $owner_repo"
    echo ""

    # Check if project already exists
    if project_exists "$name"; then
        echo -e "${YELLOW}Warning: Project '$name' already exists${NC}"
        read -p "Overwrite? [y/N] " -n 1 -r
        echo ""
        if [[ ! $REPLY =~ ^[Yy]$ ]]; then
            echo "Aborted"
            exit 0
        fi
        echo ""
    fi

    # Generate deploy key
    echo "Generating deploy key..."
    local key_path=$(generate_deploy_key "$name")
    echo -e "${GREEN}✓ Deploy key generated at $key_path${NC}"
    echo ""

    # Add deploy key to GitHub
    echo "Adding deploy key to GitHub..."
    if gh repo deploy-key add "$key_path.pub" \
        --allow-write \
        --title "safeclaude-$name" \
        --repo "$owner_repo" 2>&1; then
        echo -e "${GREEN}✓ Deploy key added to GitHub${NC}"
    else
        echo -e "${YELLOW}⚠ Deploy key may already exist (this is fine)${NC}"
    fi
    echo ""

    # Enable branch protection
    echo "Enabling branch protection on 'main'..."
    if gh api "repos/$owner_repo/branches/main/protection" \
        --method PUT \
        --field "required_pull_request_reviews[required_approving_review_count]=0" \
        --field "enforce_admins=false" \
        --field "required_status_checks=null" \
        --field "restrictions=null" &> /dev/null; then
        echo -e "${GREEN}✓ Branch protection enabled${NC}"
    else
        echo -e "${YELLOW}⚠ Could not enable branch protection (may already be enabled)${NC}"
    fi
    echo ""

    # Add to registry
    add_project "$name" "$repo_url" "$owner_repo" "$key_path" "main"

    echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
    echo -e "${GREEN}Setup complete!${NC}"
    echo ""
    echo "You can now run:"
    echo "  safeclaude run $name"
    echo ""
}

# List all projects
cmd_list() {
    echo -e "${GREEN}Configured Projects${NC}"
    echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
    echo ""

    local projects=$(list_projects)

    if [ "$projects" = "{}" ]; then
        echo "No projects configured yet"
        echo ""
        echo "Add a project with:"
        echo "  safeclaude setup <name> <repo-url>"
        return
    fi

    # Parse and display projects
    echo "$projects" | jq -r 'to_entries[] | "\(.key)\t\(.value.owner_repo)\t\(.value.last_used)"' | \
        while IFS=$'\t' read -r name owner_repo last_used; do
            printf "  ${BLUE}%-20s${NC} %s\n" "$name" "$owner_repo"
            printf "    Last used: %s\n\n" "$last_used"
        done
}

# Remove a project
cmd_remove() {
    local name="$1"

    if [ -z "$name" ]; then
        echo -e "${RED}Error: Project name required${NC}"
        echo "Usage: safeclaude remove <name>"
        exit 1
    fi

    if ! project_exists "$name"; then
        echo -e "${RED}Error: Project '$name' not found${NC}"
        exit 1
    fi

    echo -e "${YELLOW}Remove project '$name'?${NC}"
    echo "This will:"
    echo "  - Remove from registry"
    echo "  - Delete local deploy key"
    echo "  - NOT remove deploy key from GitHub (do that manually)"
    echo ""
    read -p "Continue? [y/N] " -n 1 -r
    echo ""

    if [[ ! $REPLY =~ ^[Yy]$ ]]; then
        echo "Aborted"
        exit 0
    fi

    # Delete deploy key
    delete_key "$name"

    # Remove from registry
    remove_project "$name"

    echo -e "${GREEN}Project '$name' removed${NC}"
    echo ""
    echo "Note: Deploy key still exists on GitHub. Remove it manually:"
    local owner_repo=$(get_project_owner_repo "$name")
    echo "  https://github.com/$owner_repo/settings/keys"
}

# Run a project
cmd_run() {
    local name="$1"
    shift

    if [ -z "$name" ]; then
        echo -e "${RED}Error: Project name required${NC}"
        echo "Usage: safeclaude run <name> [OPTIONS]"
        exit 1
    fi

    if ! project_exists "$name"; then
        echo -e "${RED}Error: Project '$name' not found${NC}"
        echo ""
        echo "Available projects:"
        cmd_list
        exit 1
    fi

    # Try to load API key from config if not in environment
    # This is optional - Claude Code CLI can use subscription auth
    if [ -z "$ANTHROPIC_API_KEY" ]; then
        local stored_key=$(get_api_key)
        if [ -n "$stored_key" ]; then
            export ANTHROPIC_API_KEY="$stored_key"
            echo -e "${BLUE}Using API key from config${NC}"
        fi
        # If no API key, Claude Code will use subscription authentication
    fi

    # Get project details
    local repo_url=$(get_project_url "$name")
    local key_path=$(get_project_key_path "$name")

    if [ ! -f "$key_path" ]; then
        echo -e "${RED}Error: Deploy key not found at $key_path${NC}"
        echo "Try running: safeclaude setup $name <repo-url>"
        exit 1
    fi

    # Update last used
    update_last_used "$name"

    # Read config defaults and prepend them to arguments
    # This allows command-line flags to override config settings
    local config_args=()

    # Read host config settings from config and convert to flags
    local use_prompt=$(get_config_value 'use_host_prompt' 'true')
    local use_agents=$(get_config_value 'use_host_agents' 'true')
    local use_commands=$(get_config_value 'use_host_commands' 'true')

    config_args+=("--use-host-prompt=$use_prompt")
    config_args+=("--use-host-agents=$use_agents")
    config_args+=("--use-host-commands=$use_commands")

    # Get sandbox instructions file path
    local instructions_file=$(get_config_value 'sandbox_instructions_file' "$SAFECLAUDE_DIR/sandbox_instructions.md")

    # Warn if instructions file is outside home directory
    if [ -n "$instructions_file" ] && [ -f "$instructions_file" ]; then
        if [[ ! "$instructions_file" =~ ^$HOME/ ]] && [[ ! "$instructions_file" =~ ^$SAFECLAUDE_DIR/ ]]; then
            echo -e "${YELLOW}Warning: sandbox_instructions_file is outside your home directory${NC}"
            echo "  File: $instructions_file"
            echo "  This file will be readable by Claude in the container."
            echo ""
        fi
    fi

    echo -e "${GREEN}SafeClaude${NC}"
    echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
    echo "Project:    $name"
    echo "Repository: $repo_url"
    echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
    echo ""
    echo "Launching sandbox container..."
    echo ""

    # Build and execute docker command (config args + user args)
    build_docker_command "$name" "$repo_url" "$key_path" "$instructions_file" "${config_args[@]}" "$@" | execute_docker_command

    echo ""
    echo -e "${GREEN}Sandbox session ended${NC}"
    echo "Container has been automatically removed"
}

# Start a project in background
cmd_start() {
    local name="$1"
    local agent_name="$2"

    if [ -z "$name" ] || [ -z "$agent_name" ]; then
        echo -e "${RED}Error: Project name and agent name are required${NC}"
        echo "Usage: safeclaude start <name> <agent-name>"
        exit 1
    fi

    # Validate agent name (alphanumeric, hyphens, underscores only)
    if [[ ! "$agent_name" =~ ^[a-zA-Z0-9_-]+$ ]]; then
        echo -e "${RED}Error: Agent name must contain only letters, numbers, hyphens, and underscores${NC}"
        echo "Invalid name: $agent_name"
        exit 1
    fi

    # Validate agent name length
    if [ ${#agent_name} -gt 64 ]; then
        echo -e "${RED}Error: Agent name too long (max 64 characters)${NC}"
        exit 1
    fi

    if ! project_exists "$name"; then
        echo -e "${RED}Error: Project '$name' not found${NC}"
        exit 1
    fi

    # Try to load API key from config if not in environment
    # This is optional - Claude Code CLI can use subscription auth
    if [ -z "$ANTHROPIC_API_KEY" ]; then
        local stored_key=$(get_api_key)
        if [ -n "$stored_key" ]; then
            export ANTHROPIC_API_KEY="$stored_key"
            echo -e "${BLUE}Using API key from config${NC}"
        fi
        # If no API key, Claude Code will use subscription authentication
    fi

    # Get project details
    local repo_url=$(get_project_url "$name")
    local key_path=$(get_project_key_path "$name")

    if [ ! -f "$key_path" ]; then
        echo -e "${RED}Error: Deploy key not found at $key_path${NC}"
        exit 1
    fi

    # Check if agent already exists
    if container_exists "$name-$agent_name"; then
        echo -e "${RED}Error: Agent '$agent_name' already exists for project '$name'${NC}"
        echo "Use a different name or stop the existing agent:"
        echo "  safeclaude stop $name-$agent_name"
        exit 1
    fi

    # Update last used
    update_last_used "$name"

    # Get sandbox instructions file path
    local instructions_file=$(get_config_value 'sandbox_instructions_file' "$SAFECLAUDE_DIR/sandbox_instructions.md")

    echo -e "${GREEN}Starting agent '$agent_name' for project '$name'...${NC}"
    echo ""

    # Build and execute docker command in detached mode
    build_docker_command "$name" "$repo_url" "$key_path" "$instructions_file" --detach --name "$agent_name" --network | execute_docker_command

    # Give container time to fail if it's going to
    sleep 2

    # Check if container is still running
    if ! container_running "$name-$agent_name"; then
        echo -e "${RED}Error: Container failed to start${NC}"
        echo ""
        echo "View error logs with:"
        echo "  safeclaude logs $name-$agent_name"
        exit 1
    fi

    echo -e "${GREEN}Agent started successfully${NC}"
    echo ""
    echo "Attach to it with:"
    echo "  safeclaude attach $name-$agent_name"
    echo ""
    echo "View logs with:"
    echo "  safeclaude logs $name-$agent_name"
}

# Attach to a running container
cmd_attach() {
    local container_name="$1"

    if [ -z "$container_name" ]; then
        echo -e "${RED}Error: Container name required${NC}"
        echo "Usage: safeclaude attach <container-name>"
        exit 1
    fi

    attach_container "$container_name"
}

# Show container logs
cmd_logs() {
    local container_name="$1"
    local follow_flag="$2"

    if [ -z "$container_name" ]; then
        echo -e "${RED}Error: Container name required${NC}"
        echo "Usage: safeclaude logs <container-name> [-f]"
        exit 1
    fi

    show_logs "$container_name" "$follow_flag"
}

# List running containers
cmd_ps() {
    echo -e "${GREEN}Running SafeClaude Containers${NC}"
    echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
    echo ""
    list_containers
}

# Stop a container
cmd_stop() {
    local container_name="$1"

    if [ -z "$container_name" ]; then
        echo -e "${RED}Error: Container name required${NC}"
        echo "Usage: safeclaude stop <container-name>"
        exit 1
    fi

    stop_container "$container_name"
}

# Configuration management
cmd_config() {
    local subcommand="$1"
    shift || true

    case "$subcommand" in
        set-api-key)
            local api_key="$1"

            if [ -z "$api_key" ]; then
                echo -e "${RED}Error: API key required${NC}"
                echo "Usage: safeclaude config set-api-key <key>"
                exit 1
            fi

            # Validate key format (basic check)
            if [[ ! "$api_key" =~ ^sk-ant- ]]; then
                echo -e "${YELLOW}Warning: API key doesn't start with 'sk-ant-'${NC}"
                read -p "Continue anyway? [y/N] " -n 1 -r
                echo ""
                if [[ ! $REPLY =~ ^[Yy]$ ]]; then
                    exit 0
                fi
            fi

            # Show security warning
            echo -e "${YELLOW}⚠️  WARNING: Security Notice${NC}"
            echo ""
            echo "Your API key will be stored in plaintext at:"
            echo "  $SAFECLAUDE_DIR/config.json"
            echo ""
            echo "This is convenient but less secure than environment variables."
            echo "Any process running as your user can read this file."
            echo ""
            echo "Note: API keys are optional if you have a Claude Code subscription."
            echo "Claude Code will use your subscription auth automatically."
            echo ""
            echo "Alternative (more secure):"
            echo "  export ANTHROPIC_API_KEY='$api_key'"
            echo "  # Add to ~/.zshrc or ~/.bashrc for persistence"
            echo ""
            read -p "Store in config anyway? [y/N] " -n 1 -r
            echo ""

            if [[ ! $REPLY =~ ^[Yy]$ ]]; then
                echo "Cancelled"
                exit 0
            fi

            if set_api_key "$api_key"; then
                echo -e "${GREEN}✓ API key saved to config${NC}"
                echo ""
                echo "The API key will be used automatically if ANTHROPIC_API_KEY"
                echo "environment variable is not set."
            else
                echo -e "${RED}Error: Failed to save API key${NC}"
                exit 1
            fi
            ;;

        get-api-key)
            local stored_key=$(get_api_key)

            if [ -z "$stored_key" ]; then
                echo "No API key stored in config"
                echo ""
                echo "Note: API keys are optional if you have a Claude Code subscription."
                echo ""
                echo "To set an API key:"
                echo "  safeclaude config set-api-key <key>"
                echo ""
                echo "Or use environment variable:"
                echo "  export ANTHROPIC_API_KEY='sk-ant-...'"
                exit 0
            fi

            # Mask the key for security (show first 12 chars + ...)
            local masked_key="${stored_key:0:12}...${stored_key: -4}"
            echo "Stored API key: $masked_key"
            echo "Location: $SAFECLAUDE_DIR/config.json"
            ;;

        remove-api-key)
            local stored_key=$(get_api_key)

            if [ -z "$stored_key" ]; then
                echo "No API key stored in config"
                exit 0
            fi

            read -p "Remove API key from config? [y/N] " -n 1 -r
            echo ""

            if [[ ! $REPLY =~ ^[Yy]$ ]]; then
                echo "Cancelled"
                exit 0
            fi

            if remove_api_key; then
                echo -e "${GREEN}✓ API key removed from config${NC}"
            else
                echo -e "${RED}Error: Failed to remove API key${NC}"
                exit 1
            fi
            ;;

        set)
            local key="$1"
            local value="$2"

            if [ -z "$key" ] || [ -z "$value" ]; then
                echo -e "${RED}Error: Both key and value required${NC}"
                echo "Usage: safeclaude config set <key> <value>"
                echo ""
                echo "Available keys:"
                echo "  use_host_prompt      Copy CLAUDE.md (true/false)"
                echo "  use_host_agents      Copy agents/ (true/false)"
                echo "  use_host_commands    Copy commands/ (true/false)"
                echo "  default_network      Enable network by default (true/false)"
                echo "  default_persist      Enable persistence by default (true/false)"
                exit 1
            fi

            if set_config_value "$key" "$value"; then
                echo -e "${GREEN}✓ Config updated: $key = $value${NC}"
            else
                echo -e "${RED}Error: Failed to update config${NC}"
                exit 1
            fi
            ;;

        get)
            local key="$1"

            if [ -z "$key" ]; then
                # Show all config
                echo -e "${GREEN}SafeClaude Configuration${NC}"
                echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
                echo ""
                cat "$SAFECLAUDE_DIR/config.json" | jq -r 'to_entries[] | "  \(.key): \(.value)"'
                echo ""
                echo "Location: $SAFECLAUDE_DIR/config.json"
            else
                local value=$(get_config_value "$key")
                echo "$key: $value"
            fi
            ;;

        list)
            echo -e "${GREEN}SafeClaude Configuration${NC}"
            echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
            echo ""
            cat "$SAFECLAUDE_DIR/config.json" | jq -r 'to_entries[] | "  \(.key): \(.value)"'
            echo ""
            echo "Location: $SAFECLAUDE_DIR/config.json"
            ;;

        *)
            echo -e "${RED}Error: Unknown config subcommand '$subcommand'${NC}"
            echo ""
            echo "Available subcommands:"
            echo "  safeclaude config set <key> <value>      Set a config value"
            echo "  safeclaude config get [key]              Get config value(s)"
            echo "  safeclaude config list                   List all config"
            echo "  safeclaude config set-api-key <key>      Store API key"
            echo "  safeclaude config get-api-key            Show API key"
            echo "  safeclaude config remove-api-key         Remove API key"
            exit 1
            ;;
    esac
}

# Main command dispatcher
main() {
    # Check dependencies
    check_docker
    check_image
    check_jq

    # Initialize SafeClaude directory
    init_safeclaude_dir

    # Parse command
    local command="$1"
    shift || true

    case "$command" in
        setup)
            cmd_setup "$@"
            ;;
        list|ls)
            cmd_list
            ;;
        remove|rm)
            cmd_remove "$@"
            ;;
        run)
            cmd_run "$@"
            ;;
        start)
            cmd_start "$@"
            ;;
        attach)
            cmd_attach "$@"
            ;;
        logs)
            cmd_logs "$@"
            ;;
        ps)
            cmd_ps
            ;;
        stop)
            cmd_stop "$@"
            ;;
        config)
            cmd_config "$@"
            ;;
        --help|help|-h)
            usage
            ;;
        --version|-v)
            echo "SafeClaude v${SCRIPT_VERSION}"
            ;;
        "")
            usage
            ;;
        *)
            echo -e "${RED}Error: Unknown command '$command'${NC}"
            echo ""
            usage
            ;;
    esac
}

main "$@"
